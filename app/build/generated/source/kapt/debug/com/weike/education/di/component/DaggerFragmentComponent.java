// Generated by Dagger (https://google.github.io/dagger).
package com.weike.education.di.component;

import android.app.Activity;
import com.weike.education.base.BaseInjectFragment_MembersInjector;
import com.weike.education.di.module.FragmentModule;
import com.weike.education.di.module.FragmentModule_ProvideActivityFactory;
import com.weike.education.mvp.presenter.app.SelectionPresenter;
import com.weike.education.mvp.presenter.app.SelectionTypePresenter;
import com.weike.education.mvp.presenter.course.CourseCategoryPresenter;
import com.weike.education.mvp.presenter.mine.MinePresenter;
import com.weike.education.ui.fragment.app.DiscoveryFragment;
import com.weike.education.ui.fragment.app.SectionFragment;
import com.weike.education.ui.fragment.app.SectionTypeFragment;
import com.weike.education.ui.fragment.course.CourseCategoryFragment;
import com.weike.education.ui.fragment.mine.MineFragment;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerFragmentComponent implements FragmentComponent {
  private ApiComponent apiComponent;

  private Provider<Activity> provideActivityProvider;

  private DaggerFragmentComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private SelectionPresenter getSelectionPresenter() {
    return new SelectionPresenter(
        Preconditions.checkNotNull(
            apiComponent.getRetrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private SelectionTypePresenter getSelectionTypePresenter() {
    return new SelectionTypePresenter(
        Preconditions.checkNotNull(
            apiComponent.getRetrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private MinePresenter getMinePresenter() {
    return new MinePresenter(
        Preconditions.checkNotNull(
            apiComponent.getRetrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private CourseCategoryPresenter getCourseCategoryPresenter() {
    return new CourseCategoryPresenter(
        Preconditions.checkNotNull(
            apiComponent.getRetrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideActivityProvider =
        DoubleCheck.provider(FragmentModule_ProvideActivityFactory.create(builder.fragmentModule));
    this.apiComponent = builder.apiComponent;
  }

  @Override
  public Activity getActivity() {
    return provideActivityProvider.get();
  }

  @Override
  public void inject(DiscoveryFragment discoveryFragment) {}

  @Override
  public void inject(SectionFragment selectionFragment) {
    injectSectionFragment(selectionFragment);
  }

  @Override
  public void inject(SectionTypeFragment selectionTypeFragment) {
    injectSectionTypeFragment(selectionTypeFragment);
  }

  @Override
  public void inject(MineFragment mineFragment) {
    injectMineFragment(mineFragment);
  }

  @Override
  public void inject(CourseCategoryFragment courseCategoryFragment) {
    injectCourseCategoryFragment(courseCategoryFragment);
  }

  private SectionFragment injectSectionFragment(SectionFragment instance) {
    BaseInjectFragment_MembersInjector.injectMPresenter(instance, getSelectionPresenter());
    return instance;
  }

  private SectionTypeFragment injectSectionTypeFragment(SectionTypeFragment instance) {
    BaseInjectFragment_MembersInjector.injectMPresenter(instance, getSelectionTypePresenter());
    return instance;
  }

  private MineFragment injectMineFragment(MineFragment instance) {
    BaseInjectFragment_MembersInjector.injectMPresenter(instance, getMinePresenter());
    return instance;
  }

  private CourseCategoryFragment injectCourseCategoryFragment(CourseCategoryFragment instance) {
    BaseInjectFragment_MembersInjector.injectMPresenter(instance, getCourseCategoryPresenter());
    return instance;
  }

  public static final class Builder {
    private FragmentModule fragmentModule;

    private ApiComponent apiComponent;

    private Builder() {}

    public FragmentComponent build() {
      if (fragmentModule == null) {
        throw new IllegalStateException(FragmentModule.class.getCanonicalName() + " must be set");
      }
      if (apiComponent == null) {
        throw new IllegalStateException(ApiComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerFragmentComponent(this);
    }

    public Builder fragmentModule(FragmentModule fragmentModule) {
      this.fragmentModule = Preconditions.checkNotNull(fragmentModule);
      return this;
    }

    public Builder apiComponent(ApiComponent apiComponent) {
      this.apiComponent = Preconditions.checkNotNull(apiComponent);
      return this;
    }
  }
}
